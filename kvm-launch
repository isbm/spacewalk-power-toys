#!/usr/bin/perl -w
#
# Copyright (c) 2013, SUSE Linux Products GmbH
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without modification,
# are permitted provided that the following conditions are met:
#
# Redistributions of source code must retain the above copyright notice,
# this list of conditions and the following disclaimer. Redistributions in binary 
# form must reproduce the above copyright notice, this list of conditions and the
# following disclaimer in the documentation and/or other materials provided with
# the distribution.
#
# Neither the name of the SUSE Linux Products GmbH nor the names of its contributors
# may be used to endorse or promote products derived from this software without
# specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
# IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
# OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
# OF THE POSSIBILITY OF SUCH DAMAGE. 
#
#
# KVM images launcher.
#
# Author: Bo Maryniuk <bo@suse.de>

use strict;
use Getopt::Std;
use File::Basename;
use File::Path qw/make_path/;
use vars qw/ %cliarg /;
use POSIX ":sys_wait_h";

my $QEMU_IMG = "/usr/bin/qemu-img";
my $QEMU_KVM = "/usr/bin/qemu-kvm";
my $TUNCTL = "/sbin/tunctl";
my $IF_UP = "/etc/sysconfig/network/scripts/qemu-ifup";
my $IF_DN = "/etc/sysconfig/network/scripts/qemu-ifdown";
my $VNCVIEWER = "/usr/bin/vncviewer";

my $CONFIG = ".kvm-launch.conf";
my $PIDFILE = ".kvm-launch.pid";
my $PIDDB = $ENV{"HOME"} . "/tmp/kvm-launch";
my $DATE_SFX = `date +"%Y.%m.%d-%H%M%S"`;
chomp $DATE_SFX;
my $SNP_SFX = $DATE_SFX;

my $SEP = "::";

chomp $DATE_SFX;
my $X11_ENV_ERROR = $ENV{"DISPLAY"} eq "" 
       ? "INFO: Use X11 forwarding for this." : 
         (-e $VNCVIEWER) ? "" : "WARNING: install vncviewer first!";

# Default configuration
my %CFG = (
    'label' => "KVM instance",
    'port' => 45,
    'MAC' => "de:ad:be:ef:22:02",
    'memory' => "2G"
    );

#
# Main
#
sub main() {
    &check_environment();
    &cleanup_zombie_pids();

    my $opts = "hs:r:t:cni:z:dl:k:qfm:a:p:v:";
    getopts("$opts", \%cliarg);
    if ($cliarg{n}) {
	&cleanup_tun_devices();
    } elsif ($cliarg{c}) {
	if (!$cliarg{t}) {
	    &cli_error("How to call your image?");
	} elsif (!$cliarg{z}) {
	    &cli_error("What is the size of your image in gigabytes?");
	}
	&create_disk_image($cliarg{z}, $cliarg{t});
    } elsif ($cliarg{s}) {
	if ($cliarg{t}) {
	    $SNP_SFX = $cliarg{t};
	    $SNP_SFX =~ s/\s+/_/g;
	    $SNP_SFX = lc($SNP_SFX);
	}

	if ($cliarg{d}) {
	    $SNP_SFX .= "." . $DATE_SFX;
	}
	&snapshot($cliarg{s});
    } elsif ($cliarg{r}) {
	&run($cliarg{r}, $cliarg{i}, $cliarg{l});
    } elsif ($cliarg{q}) {
	&list_running_images();
    } elsif ($cliarg{k}) {
	&kill_KVM_process($cliarg{k});
    } elsif ($cliarg{f}) {
	&get_configuration();
	if ($cliarg{l}) {
	    $CFG{label} = $cliarg{l};
	}

	if ($cliarg{p}) {
	    $CFG{port} = $cliarg{p};
	}

	if ($cliarg{a}) {
	    $CFG{MAC} = $cliarg{a};
	}

	if ($cliarg{m}) {
	    my $mem = $cliarg{m};
	    $mem =~ s/\D//g;
	    $CFG{memory} = $mem . "G";
	}
	&save_configuration();
	print "Configuration has been saved to $CONFIG file." . $/;
    } elsif ($cliarg{v}) {
	&open_vnc_to_remote($cliarg{v});
    } else {
	&usage();
    }
}

#
# Check environment
#
sub check_environment() {
    unless (-e $QEMU_IMG) {
	&cli_error("Where is the $QEMU_IMG?..");
    }

    unless (-e $IF_UP || -e $IF_DN) {
	&cli_error("Missing \"$IF_UP\" or \"$IF_DN\" script.");
    }

    unless (-e $QEMU_KVM) {
	&cli_error("Where is the $QEMU_KVM?..");
    }

    unless (-e $TUNCTL) {
	&cli_error("Cannot find $TUNCTL on the place.");
    }

    # Create pid db
    unless (-e $PIDDB) {
	&make_path($PIDDB);
	chmod 0775, $PIDDB;
    }
}

#
# Print header
#
sub cli_header() {
    print STDERR "KVM Image Runner, 0.1, Bloody Alpha.\n\n";
}

#
# Print an error.
#
sub cli_error() {
    &cli_out("Error", shift, 1);
}

#
# Print an info.
#
sub cli_info() {
    &cli_out("Info", shift);
}

#
# Print an out msg and go away.
#
sub cli_out() {
    my $prefix = shift;
    my $msg = shift;
    my $quit = shift;
    if ($msg) {
	&cli_header();
	print STDERR "*** $prefix: $msg\n\n";
    }
    exit if ($quit);
}

#
# Run the image.
#
sub run() {
    my $img_name = shift;
    my $iso_img = shift;
    my $label = shift;

    if (defined($label)) {
	chomp $label;
    }

    &get_configuration();
    unless ($label) {
	unless ($CFG{label}) {
	    $label = $img_name;
	} else {
	    $label = $CFG{label};
	}
    }

    $label =~ s/\n//g;

    # Check if we already have such label running
    my @pidmap = &get_pid_map();
    foreach my $pdref (@pidmap) {
	my %pd = %{$pdref};
	if (uc($label) eq uc($pd{label})) {
	    &cli_error("Sorry, but \"$pd{label}\" is already running. You don't want to mess with that.");
	}
    }

    unless (-e $img_name) {
	&cli_error("Unable to find \"$img_name\" to run it.");
    }

    &run_kvm_image($label, $CFG{memory}, $CFG{MAC}, $img_name, $CFG{port}, $iso_img);
}

#
# Run image util.
#
sub run_kvm_image() {
    my $label = shift;
    my $memory = shift;
    my $macaddr = shift;
    my $image = shift;
    my $vnc_port = shift;
    my $iso = shift;

    my $uid = `whoami`;
    $uid =~ s/\n//g;

    if ($iso) {
	unless (-e $iso) {
	    &cli_error("Cannot find ISO image \"$iso\".");
	}
	$iso = "-cdrom $iso";
    } else {
	$iso = "";
    }

    my $me = `whoami`;
    chomp $me;
    if ($me =~ /root/) {
	&cli_error("Trying to run this as root? Don't.");
    }

    `sudo chown root.kvm /dev/net/tun`;
    `sudo chmod g+rw /dev/net/tun`;
    my $iface = `sudo $TUNCTL -b -u $me -g kvm`;
    chomp $iface;

    my $pid;
    defined($pid = fork()) || &cli_error("Unable to start: $!");
    if ($pid) {
	print "Attaching i-net interface $iface\n";
	print "Access via VNC on port $vnc_port\n";

	waitpid($pid, WNOHANG);
	my @out = split(/\s+/, `ps ax | grep $macaddr | grep -v grep`);

	my $pidfile;
	if (-e $PIDDB) {
	    $PIDFILE = $PIDDB . "/" . $out[0] . ".pid";
	}

	if (!open($pidfile, "> $PIDFILE")) {
	    &cli_error("Oops, unable to save $PIDFILE!");
	}

	print $pidfile "$label$SEP$image$SEP$uid$SEP$vnc_port\n";
	close($pidfile);
	chmod 0664, $pidfile;
    } else {
	system("$QEMU_KVM -net nic,macaddr=$macaddr -net tap,ifname=$iface,script=$IF_UP,downscript=$IF_DN -m $memory -hda $image -vnc :$vnc_port $iso");
	exit;
    }
}

#
# Cleanup TUN devices.
#
sub cleanup_tun_devices() {
    my $me = `whoami`;
    chomp($me);
    if ($me !~ /root/) {
	&cli_error("You have to be root. Try sudo, perhaps?");
    }

    &cli_header();

    my $i = 0;
    print "Busy devices:$/";
    for (0..255) {
	if (system("$TUNCTL -d tap$_ > /dev/null 2>&1")) {
	    print "\tTAP $_$/";
	    $i++;
	}
    }
    print ($i && "$i devices left active.\n\n" || "\tNo allocated devices found.\n\n");
}

#
# Create disk image
#
sub create_disk_image() {
    my $size = shift;
    my $name = shift;

    $name .= ".img";
    $size .= "G";

    if (-e $name) {
	&cli_error("Image \"$name\" already exists.");
    }

    print "Creating image \"$name\", size of $size... ";
    system("$QEMU_IMG create -f qcow2 $name $size > /dev/null 2>&1");
    print "Done\n";
}

#
# Snapshot the image.
#
sub snapshot() {
    my $img_name = shift;

    unless (-e $img_name) {
	&cli_error("Image \"$img_name\" does not exists.");
    }

    my @imgtkn = split(/\./, $img_name);
    my $ext = pop(@imgtkn);
    my $n_img_name = join(".", @imgtkn) . "-$SNP_SFX.$ext";

    print "Taking snapshot from:\n\t$img_name ...\n";
    system "$QEMU_IMG create -f qcow2 -b $img_name $n_img_name > /dev/null";
    print "New snapshot has been saved to:\n\t$n_img_name\n\n";

    exit;
}

#
# Get pid map
#
sub get_pid_map() {
    my @pidmap = ();
    opendir(PDB, $PIDDB) or &cli_error($!);
    while (my $fpid = readdir(PDB)) {
	if ($fpid =~ "pid") {
	    open FPID, "$PIDDB/$fpid" or &cli_error($!);
	    binmode FPID;
	    my $piddata = <FPID>;
	    close FPID;
	    chomp $piddata;
	    $fpid =~ s/\D//g;
	    my @pdt = split("::", $piddata);
	    if ($#pdt != 3) {
		&cli_error("The index of running KVM images is either corrupted or no longer compatible.\n\n"
			   . "    If you've upgraded KVM Launcher, then the format has been changed.\n"
			   . "    It may be other reasons (you edited something manually etc).\n"
			   . "    Please kill all KVM instances and remove $PIDDB directory, start all again.");
	    }

	    my %pd = (
		"pid" => $fpid,
		"label" => $pdt[0],
		"localfilename" => $pdt[1],
		"uid" => $pdt[2],
		"vncport" => $pdt[3],
		);
	    my $ref = \%pd;
	    push(@pidmap, $ref);
	}
    }    

    return @pidmap;
}

#
# Formatting bit. Adds three dots, if the string is too long.
#

sub trm {
    my($width, $string) = @_;
    if (length($string) > $width) {
        return(substr($string, 0, $width - 3) . "...");
    }
    else {
        return($string);
    }
}

#
# List running images.
#
sub list_running_images() {
    my @pidmap = &get_pid_map();
    if (!@pidmap) {
	&cli_info("No known KVM images running at the moment.");
	exit;
    }

    my ($pid, $uid, $label, $imgname);

    format STDOUT_TOP =
PID      UID       Label                Image name
=================================================================================
.
    format STDOUT = 
@<<<<<<  @<<<<<<<< @<<<<<<<<<<<<<<<<<<< @<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
trm(6, $pid), trm(8, $uid), trm(20, $label), trm(40, $imgname)
.

    foreach my $pdref (@pidmap) {
	my %pd = %{$pdref};
	$pid = $pd{pid};
        $uid = $pd{uid};
        $label = $pd{label};
        $imgname = $pd{localfilename};
        write;
    }
}

#
# Check PID running
#

sub is_running() {
    my $pid = shift;
    my @proc_data = split(/\s+:\s+/, `ps uax | awk '{print \$1,":",\$2}' | grep $pid`);
    return (@proc_data && $proc_data[1] == $pid) ? $proc_data[0] : undef;
}


#
# Cleanup zombie pids
#
sub cleanup_zombie_pids() {
    my @pidmap = &get_pid_map();
    foreach my $pdref (@pidmap) {
	my %pd = %{$pdref};
	my $running = &is_running($pd{pid});
	my $pidf = "$PIDDB/$pd{pid}.pid";
	if (!$running && -e $pidf) {
	    unlink $pidf;
	}
    }
}

#
# Kill KVM process
#
sub kill_KVM_process() {
    my $param = shift;
    my @pidmap = &get_pid_map();
    foreach my $pdref (@pidmap) {
	my %pd = %{$pdref};
	if (("$param" eq "$pd{pid}") || (uc("$param") eq uc($pd{label}))) {
	    kill 9, $pd{pid};
	    my $pidf = "$PIDDB/$pd{pid}.pid";
	    if (-e $pidf) {
		unlink $pidf;
	    }
	    &cli_info("KVM instance \"$pd{label}\" running on \"$pd{localfilename}\" image has been terminated.");
	    return;
	}
    }

    &cli_error("Could not find any KVM instance, matching \"$param\" criteria.");
}

#
# Read configuration or create default.
#
sub get_configuration() {
    unless (-e $CONFIG) {
	# Saves the default configuration, hardcoded above of the script.
	&save_configuration();
    }

    my $cfg_handle;
    open($cfg_handle, $CONFIG) or &cli_error("Unable to open \"$CONFIG\" file.");

    while (my $cfg_line = <$cfg_handle>) {
	$cfg_line =~ s/\s//g;
	chomp $cfg_line;
	if (($cfg_line =~ /=/) && !($cfg_line =~ /^#/)) {
	    my @cfg_set = split("=", $cfg_line);
	    $CFG{$cfg_set[0]} = $cfg_set[1];
	}
    }

    close($cfg_handle);
}

#
# Save configuration.
#
sub save_configuration() {
    my $cfg_handle;
    if (!open($cfg_handle, "> $CONFIG")) {
	&cli_error("Unable to write config to $CONFIG!");
    }

    $CFG{MAC} = &process_mac_address($CFG{MAC});

    foreach my $cfg_key (keys %CFG) {
	print $cfg_handle "$cfg_key = $CFG{$cfg_key}\n";
    }

    close($cfg_handle);
}

#
# Open VNC viewer
#
sub open_vnc_to_remote() {
    my $param = shift;
    my @pidmap = &get_pid_map();
    undef my $opened;
    foreach my $pdref (@pidmap) {
	my %pd = %{$pdref};
	if (("$param" eq "$pd{pid}") || (uc("$param") eq uc($pd{label}))) {
	    if ($X11_ENV_ERROR eq "") {
	        system("$VNCVIEWER localhost:$pd{vncport} > /dev/null 2>/dev/null & disown");
	        print "Opened VNC for $pd{label} at port $pd{vncport}\n";
	    }
	    $opened = 1;
        }
    }

    unless (defined $opened) {
        &cli_error("Could not find an instance with the PID or label called \"$param\"");
    }
}

#
# Processes MAC address. Allows to write them without a semicolumns.
#
sub process_mac_address() {
    my $mac = uc shift;

    $mac =~ s/\://g;
    $mac =~ s/[^0-9ABCDEF]//g;
    my @tokens = split //, "$mac";
    $mac = "";

    if ($#tokens != 11) {
	&cli_error("Your MAC address looks wrong. No need to use that column thing, but keep it real.");
    }

    my $idx = 0;
    for my $p (0 .. 11) {
	$mac .= $tokens[$p];
	$idx++;
	if ($idx > 1) {
	    $idx = 0;
	    if ($p < 11) {
		$mac .= ":";
	    }
	}
    }

    return $mac;
}

#
# Usage
#
sub usage() {
    &cli_header();
    print STDERR << "EOF";
Commands:
    -r   Run the image.
         Options:
	    -l      Label of the instance for further listing. Image name is default.
	    -i      Path to the ISO image during the installation.

    -c   Create the disk image (qcow2 format).
         Parameters:
            -t      Title (name) of the image.
	    -z      Size (number) in gigabytes.

    -n   Cleanup dead TUN devices (you need to be a r00t).

    -s   Snapshot the image.
         Options:
            -t      Title suffix for the snapshot image name. Date/time by default.
            -d      Add current date/time to the custom title suffix.

    -q   List running KVM images.

    -f   Generate default configuration.
         Options:
            -l      Label of the image
	    -p      Port for the VNC
	    -a      MAC address
	    -m      Memory (default 2Gb)

    -v   Open VNC $X11_ENV_ERROR
    -k   Force stop running KVM image (kills the process instantly).

    -h   This help.

EOF
    exit;
}

main();
